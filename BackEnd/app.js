const express = require('express');
const cors = require('cors');
const database = require('./database');

// Import des mod√®les pour s'assurer qu'ils sont initialis√©s
const { personne, employe, poste, patient } = require('./models/personne.js');
const { Tservice, Tconsultation, Texamen, Toperation } = require('./models/service');
const { consultation } = require('./models/consultation');
const { historiqueCaisse, caisse } = require('./models/caisse');
const { medicament, stockMedicament, typeMedicament } = require('./models/pharmacie');
const { Drug, DrugDosage } = require('./models/pharmacy');
const { TypeExamen, PrescriptionExamen, ResultatExamen, ParametreExamen } = require('./models/laboratoire');
const { PrescriptionMedicament, DispensationMedicament, Ordonnance } = require('./models/prescription');

// Import des routes
const routeSecretaire = require('./routes/routeSecretaire');
const routeMedecin = require("./routes/routeMedecin");
const routeInfirmiere = require("./routes/routeInfirmiere");
const routePharmacy = require("./routes/routePharmacy");
const routeLaborantin = require("./routes/routeLaborantin");

const app = express();
app.use(express.json());

// Configuration CORS
app.use(cors({
  origin: '*', // Pour le d√©veloppement. En production, sp√©cifie 'http://localhost:3000' ou ton domaine frontend.
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'], // Inclure OPTIONS
  allowedHeaders: [ // Liste des en-t√™tes que ton frontend peut envoyer
    'Origin',
    'X-Requested-With',
    'Content-Type',
    'Accept',
    'Authorization' // << IMPORTANT : Autoriser l'en-t√™te Authorization
  ],
  credentials: true // Si tu pr√©vois d'utiliser des cookies ou des sessions bas√©es sur les en-t√™tes d'autorisation plus tard
}));

app.use(express.json());

// Configuration des routes
app.use("/api/secretaire", routeSecretaire);
app.use("/api/medecin", routeMedecin);
app.use("/api/infirmiere", routeInfirmiere);
app.use("/api/pharmacy", routePharmacy);
app.use("/api/laborantin", routeLaborantin);

// Connexion √† la base de donn√©es et synchronisation des mod√®les
const initializeDatabase = async () => {
  try {
    console.log('üîÑ Connexion √† la base de donn√©es...');
    
    // Test de connexion
    await database.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie');

    // Synchronisation des mod√®les (cr√©ation des tables)
    console.log('üîÑ Synchronisation des mod√®les...');
    
    await database.sync({ 
      // alter: true // Utilisez cette option pour mettre √† jour les tables existantes
      // force: true // Attention: cette option supprime et recr√©e toutes les tables
    });
    
    console.log('‚úÖ Synchronisation des mod√®les termin√©e');
    console.log('üìã Tables cr√©√©es/v√©rifi√©es:');
    console.log('   - Tables personnes (personne, employe, poste, patient)');
    console.log('   - Tables services (Tservice, Tconsultation, Texamen, Toperation)');
    console.log('   - Table consultation');
    console.log('   - Tables caisse (caisse, historiqueCaisse)');
    console.log('   - Tables pharmacie ancienne (medicament, stockMedicament, typeMedicament)');
    console.log('   - Tables pharmacy nouvelle (Drug, DrugDosage)');
    console.log('   - Tables laboratoire (TypeExamen, PrescriptionExamen, ResultatExamen, ParametreExamen)');
    console.log('   - Tables prescription (PrescriptionMedicament, DispensationMedicament, Ordonnance)');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation de la base de donn√©es:', error);
    process.exit(1);
  }
};

// Initialisation de la base de donn√©es
initializeDatabase().then(() => {
  // D√©marrage du serveur seulement apr√®s l'initialisation de la DB
  const PORT = process.env.PORT || 8000;
  app.listen(PORT, () => {
    console.log(`üöÄ Serveur d√©marr√© sur le port ${PORT}`);
    console.log(`üì° API disponible sur http://localhost:${PORT}`);
    console.log('üè• CompuClinic Backend - Pr√™t √† recevoir les requ√™tes');
    console.log('\nüìã Endpoints disponibles:');
    console.log('   ‚Ä¢ /api/secretaire - Gestion des patients');
    console.log('   ‚Ä¢ /api/medecin - Consultations et prescriptions');
    console.log('   ‚Ä¢ /api/infirmiere - Param√®tres patients');
    console.log('   ‚Ä¢ /api/pharmacy - Gestion pharmacie et stocks');
    console.log('   ‚Ä¢ /api/laborantin - Gestion examens et r√©sultats');
  });
}).catch((error) => {
  console.error('‚ùå Erreur fatale lors du d√©marrage:', error);
  process.exit(1);
});

// Gestion gracieuse de l'arr√™t
process.on('SIGINT', async () => {
  console.log('\nüîÑ Arr√™t gracieux du serveur...');
  try {
    await database.close();
    console.log('‚úÖ Connexion √† la base de donn√©es ferm√©e');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur lors de la fermeture:', error);
    process.exit(1);
  }
});

module.exports = app;